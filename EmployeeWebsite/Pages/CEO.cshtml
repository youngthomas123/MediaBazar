@page
@model EmployeeWebsite.Pages.CEOModel
@{
	ViewData["Title"] = "Stats";
}



<html>
<head>
    <style>
        #lineChart {
            max-width: 550px;
            height: 300px;
        }

        #container {
            display: flex;
            align-items: center;
        }

        #stats {
            margin-top: 20px;
        }

            #stats h3 {
                margin: 10px 0;
            }

        #categoryDropdown {
            margin-left: 20px;
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
</head>
<body>
    <h2 id="currentYearText">Sales per Month (2021)</h2>
    <div id="container">
        <canvas id="lineChart"></canvas>
        @*<div id="categoryDropdown">
            <select id="categorySelect">
                <option value="">Select Category</option>
            </select>


        </div>*@
    </div>
    <div id="stats"></div>
    <script>
        let canvas = document.getElementById("lineChart");
        let lineChart;
        let currentYear = 2021; // Set the initial year
        let categories = {
            
            'Electronics': [@Model.Electronics.Jan, @Model.Electronics.Feb, @Model.Electronics.Mar, @Model.Electronics.Apr, @Model.Electronics.May, @Model.Electronics.Jun, @Model.Electronics.Jul, @Model.Electronics.Aug, @Model.Electronics.Sep, @Model.Electronics.Oct, @Model.Electronics.Nov, @Model.Electronics.Dec],
            'Furniture': [@Model.Furniture.Jan, @Model.Furniture.Feb, @Model.Furniture.Mar, @Model.Furniture.Apr, @Model.Furniture.May, @Model.Furniture.Jun, @Model.Furniture.Jul, @Model.Furniture.Aug, @Model.Furniture.Sep, @Model.Furniture.Oct, @Model.Furniture.Nov, @Model.Furniture.Dec],
            'Gaming': [@Model.Gaming.Jan, @Model.Gaming.Feb, @Model.Gaming.Mar, @Model.Gaming.Apr, @Model.Gaming.May, @Model.Gaming.Jun, @Model.Gaming.Jul, @Model.Gaming.Aug, @Model.Gaming.Sep, @Model.Gaming.Oct, @Model.Gaming.Nov, @Model.Gaming.Dec],

            'Kitchen': [@Model.Kitchen.Jan, @Model.Kitchen.Feb, @Model.Kitchen.Mar, @Model.Kitchen.Apr, @Model.Kitchen.May, @Model.Kitchen.Jun, @Model.Kitchen.Jul, @Model.Kitchen.Aug, @Model.Kitchen.Sep, @Model.Kitchen.Oct, @Model.Kitchen.Nov, @Model.Kitchen.Dec],

            'Office Supplies': [@Model.Office_Supplies.Jan, @Model.Office_Supplies.Feb, @Model.Office_Supplies.Mar, @Model.Office_Supplies.Apr, @Model.Office_Supplies.May, @Model.Office_Supplies.Jun, @Model.Office_Supplies.Jul, @Model.Office_Supplies.Aug, @Model.Office_Supplies.Sep, @Model.Office_Supplies.Oct, @Model.Office_Supplies.Nov, @Model.Office_Supplies.Dec],

            'Sports & outdoors': [@Model.Sports_outdoors.Jan, @Model.Sports_outdoors.Feb, @Model.Sports_outdoors.Mar, @Model.Sports_outdoors.Apr, @Model.Sports_outdoors.May, @Model.Sports_outdoors.Jun, @Model.Sports_outdoors.Jul, @Model.Sports_outdoors.Aug, @Model.Sports_outdoors.Sep, @Model.Sports_outdoors.Oct, @Model.Sports_outdoors.Nov, @Model.Sports_outdoors.Dec],

            'Clothing': [@Model.Clothing.Jan, @Model.Clothing.Feb, @Model.Clothing.Mar, @Model.Clothing.Apr, @Model.Clothing.May, @Model.Clothing.Jun, @Model.Clothing.Jul, @Model.Clothing.Aug, @Model.Clothing.Sep, @Model.Clothing.Oct, @Model.Clothing.Nov, @Model.Clothing.Dec],

            'Toys & Games': [@Model.Toys_Games.Jan, @Model.Toys_Games.Feb, @Model.Toys_Games.Mar, @Model.Toys_Games.Apr, @Model.Toys_Games.May, @Model.Toys_Games.Jun, @Model.Toys_Games.Jul, @Model.Toys_Games.Aug, @Model.Toys_Games.Sep, @Model.Toys_Games.Oct, @Model.Toys_Games.Nov, @Model.Toys_Games.Dec],

        };

        // Load categories from localStorage if available
        let savedCategories = localStorage.getItem('categories');
        if (savedCategories) {
            categories = JSON.parse(savedCategories);
        }

        // Create a new line chart object
        function createLineChart() {
            lineChart = new Chart(canvas, {
                type: "line",
                data: {
                    labels: getMonthLabels(),
                    datasets: Object.keys(categories).map((key) => {
                        return {
                            borderColor: getRandomColor(),
                            pointBackgroundColor: getRandomColor(),
                            fill: false,
                            data: categories[key],
                            label: key
                        };
                    })
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true,
                                max: 40
                            }
                        }]
                    }
                }
            });
        }

        // Generate an array of month labels for the x-axis
        function getMonthLabels() {
            return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        }

        // Toggle between showing sales by months or weeks
        function toggleSalesView() {
            lineChart.data.labels = getMonthLabels();
            lineChart.update();
        }

        // Function to add a new category (replace with your desired method)
        function addCategory() {
            // Your code here
        }

        // Helper function to generate random color
        function getRandomColor() {
            let letters = "0123456789ABCDEF";
            let color = "#";
            for (let i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

        // Function to update the stats based on the current data
        function updateStats(selectedCategory) {
            let statsContainer = document.getElementById("stats");
            statsContainer.innerHTML = "";

            if (selectedCategory) {
                let categoryData = categories[selectedCategory];
                let totalSales = categoryData.reduce((a, b) => a + b, 0);
                let averageSales = totalSales / categoryData.length;
                let maxSales = Math.max(...categoryData);
                let minSales = Math.min(...categoryData);

                let statsElement = document.createElement("div");
                statsElement.innerHTML = `
                                    <h3>${selectedCategory} Stats</h3>
                                    <p>Total Sales: ${totalSales}</p>
                                    <p>Average Sales: ${averageSales.toFixed(2)}</p>
                                    <p>Max Sales: ${maxSales}</p>
                                    <p>Min Sales: ${minSales}</p>
                                `;
                statsContainer.appendChild(statsElement);
            }
        }

        // Create the initial line chart
        createLineChart();

        // Add toggle button for sales view
        let toggleButton = document.createElement("button");
        toggleButton.innerText = "Toggle View";
        toggleButton.addEventListener("click", toggleSalesView);
        document.body.insertBefore(toggleButton, canvas);

        // Add input field and button for adding a new category
        let newCategoryInput = document.createElement("input");
        newCategoryInput.id = "newCategory";
        newCategoryInput.type = "text";
        newCategoryInput.placeholder = "Enter a new category";
        document.body.insertBefore(newCategoryInput, canvas);

        let addButton = document.createElement("button");
        addButton.innerText = "Add Category";
        addButton.addEventListener("click", addCategory);
        document.body.insertBefore(addButton, canvas);

        // Add event listener for category selection
        let categorySelect = document.getElementById("categorySelect");
        categorySelect.addEventListener("change", function () {
            let selectedCategory = categorySelect.value;
            updateStats(selectedCategory);
        });

        // Populate the category dropdown options
        Object.keys(categories).forEach((category) => {
            let option = document.createElement("option");
            option.value = category;
            option.text = category;
            categorySelect.appendChild(option);
        });

        // Display initial stats
        updateStats(null);
    </script>
</body>
</html>


